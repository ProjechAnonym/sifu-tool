// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sifu-tool/ent/ddns"
	"sifu-tool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// DDNSUpdate is the builder for updating DDNS entities.
type DDNSUpdate struct {
	config
	hooks    []Hook
	mutation *DDNSMutation
}

// Where appends a list predicates to the DDNSUpdate builder.
func (du *DDNSUpdate) Where(ps ...predicate.DDNS) *DDNSUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetV4method sets the "v4method" field.
func (du *DDNSUpdate) SetV4method(i int) *DDNSUpdate {
	du.mutation.ResetV4method()
	du.mutation.SetV4method(i)
	return du
}

// SetNillableV4method sets the "v4method" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableV4method(i *int) *DDNSUpdate {
	if i != nil {
		du.SetV4method(*i)
	}
	return du
}

// AddV4method adds i to the "v4method" field.
func (du *DDNSUpdate) AddV4method(i int) *DDNSUpdate {
	du.mutation.AddV4method(i)
	return du
}

// ClearV4method clears the value of the "v4method" field.
func (du *DDNSUpdate) ClearV4method() *DDNSUpdate {
	du.mutation.ClearV4method()
	return du
}

// SetV6method sets the "v6method" field.
func (du *DDNSUpdate) SetV6method(i int) *DDNSUpdate {
	du.mutation.ResetV6method()
	du.mutation.SetV6method(i)
	return du
}

// SetNillableV6method sets the "v6method" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableV6method(i *int) *DDNSUpdate {
	if i != nil {
		du.SetV6method(*i)
	}
	return du
}

// AddV6method adds i to the "v6method" field.
func (du *DDNSUpdate) AddV6method(i int) *DDNSUpdate {
	du.mutation.AddV6method(i)
	return du
}

// ClearV6method clears the value of the "v6method" field.
func (du *DDNSUpdate) ClearV6method() *DDNSUpdate {
	du.mutation.ClearV6method()
	return du
}

// SetIpv6 sets the "ipv6" field.
func (du *DDNSUpdate) SetIpv6(s string) *DDNSUpdate {
	du.mutation.SetIpv6(s)
	return du
}

// SetNillableIpv6 sets the "ipv6" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableIpv6(s *string) *DDNSUpdate {
	if s != nil {
		du.SetIpv6(*s)
	}
	return du
}

// ClearIpv6 clears the value of the "ipv6" field.
func (du *DDNSUpdate) ClearIpv6() *DDNSUpdate {
	du.mutation.ClearIpv6()
	return du
}

// SetRev6 sets the "rev6" field.
func (du *DDNSUpdate) SetRev6(s string) *DDNSUpdate {
	du.mutation.SetRev6(s)
	return du
}

// SetNillableRev6 sets the "rev6" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableRev6(s *string) *DDNSUpdate {
	if s != nil {
		du.SetRev6(*s)
	}
	return du
}

// ClearRev6 clears the value of the "rev6" field.
func (du *DDNSUpdate) ClearRev6() *DDNSUpdate {
	du.mutation.ClearRev6()
	return du
}

// SetIpv4 sets the "ipv4" field.
func (du *DDNSUpdate) SetIpv4(s string) *DDNSUpdate {
	du.mutation.SetIpv4(s)
	return du
}

// SetNillableIpv4 sets the "ipv4" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableIpv4(s *string) *DDNSUpdate {
	if s != nil {
		du.SetIpv4(*s)
	}
	return du
}

// ClearIpv4 clears the value of the "ipv4" field.
func (du *DDNSUpdate) ClearIpv4() *DDNSUpdate {
	du.mutation.ClearIpv4()
	return du
}

// SetRev4 sets the "rev4" field.
func (du *DDNSUpdate) SetRev4(s string) *DDNSUpdate {
	du.mutation.SetRev4(s)
	return du
}

// SetNillableRev4 sets the "rev4" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableRev4(s *string) *DDNSUpdate {
	if s != nil {
		du.SetRev4(*s)
	}
	return du
}

// ClearRev4 clears the value of the "rev4" field.
func (du *DDNSUpdate) ClearRev4() *DDNSUpdate {
	du.mutation.ClearRev4()
	return du
}

// SetV4script sets the "v4script" field.
func (du *DDNSUpdate) SetV4script(s string) *DDNSUpdate {
	du.mutation.SetV4script(s)
	return du
}

// SetNillableV4script sets the "v4script" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableV4script(s *string) *DDNSUpdate {
	if s != nil {
		du.SetV4script(*s)
	}
	return du
}

// ClearV4script clears the value of the "v4script" field.
func (du *DDNSUpdate) ClearV4script() *DDNSUpdate {
	du.mutation.ClearV4script()
	return du
}

// SetV4interface sets the "v4interface" field.
func (du *DDNSUpdate) SetV4interface(s string) *DDNSUpdate {
	du.mutation.SetV4interface(s)
	return du
}

// SetNillableV4interface sets the "v4interface" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableV4interface(s *string) *DDNSUpdate {
	if s != nil {
		du.SetV4interface(*s)
	}
	return du
}

// ClearV4interface clears the value of the "v4interface" field.
func (du *DDNSUpdate) ClearV4interface() *DDNSUpdate {
	du.mutation.ClearV4interface()
	return du
}

// SetV6script sets the "v6script" field.
func (du *DDNSUpdate) SetV6script(s string) *DDNSUpdate {
	du.mutation.SetV6script(s)
	return du
}

// SetNillableV6script sets the "v6script" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableV6script(s *string) *DDNSUpdate {
	if s != nil {
		du.SetV6script(*s)
	}
	return du
}

// ClearV6script clears the value of the "v6script" field.
func (du *DDNSUpdate) ClearV6script() *DDNSUpdate {
	du.mutation.ClearV6script()
	return du
}

// SetV6interface sets the "v6interface" field.
func (du *DDNSUpdate) SetV6interface(s string) *DDNSUpdate {
	du.mutation.SetV6interface(s)
	return du
}

// SetNillableV6interface sets the "v6interface" field if the given value is not nil.
func (du *DDNSUpdate) SetNillableV6interface(s *string) *DDNSUpdate {
	if s != nil {
		du.SetV6interface(*s)
	}
	return du
}

// ClearV6interface clears the value of the "v6interface" field.
func (du *DDNSUpdate) ClearV6interface() *DDNSUpdate {
	du.mutation.ClearV6interface()
	return du
}

// SetDomains sets the "domains" field.
func (du *DDNSUpdate) SetDomains(s []string) *DDNSUpdate {
	du.mutation.SetDomains(s)
	return du
}

// AppendDomains appends s to the "domains" field.
func (du *DDNSUpdate) AppendDomains(s []string) *DDNSUpdate {
	du.mutation.AppendDomains(s)
	return du
}

// SetConfig sets the "config" field.
func (du *DDNSUpdate) SetConfig(m map[string]string) *DDNSUpdate {
	du.mutation.SetConfig(m)
	return du
}

// SetResult sets the "result" field.
func (du *DDNSUpdate) SetResult(m map[string]string) *DDNSUpdate {
	du.mutation.SetResult(m)
	return du
}

// ClearResult clears the value of the "result" field.
func (du *DDNSUpdate) ClearResult() *DDNSUpdate {
	du.mutation.ClearResult()
	return du
}

// SetStatus sets the "status" field.
func (du *DDNSUpdate) SetStatus(m map[string]int) *DDNSUpdate {
	du.mutation.SetStatus(m)
	return du
}

// SetWebhook sets the "webhook" field.
func (du *DDNSUpdate) SetWebhook(m map[string]string) *DDNSUpdate {
	du.mutation.SetWebhook(m)
	return du
}

// ClearWebhook clears the value of the "webhook" field.
func (du *DDNSUpdate) ClearWebhook() *DDNSUpdate {
	du.mutation.ClearWebhook()
	return du
}

// Mutation returns the DDNSMutation object of the builder.
func (du *DDNSUpdate) Mutation() *DDNSMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DDNSUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DDNSUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DDNSUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DDNSUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DDNSUpdate) check() error {
	if v, ok := du.mutation.Ipv6(); ok {
		if err := ddns.Ipv6Validator(v); err != nil {
			return &ValidationError{Name: "ipv6", err: fmt.Errorf(`ent: validator failed for field "DDNS.ipv6": %w`, err)}
		}
	}
	if v, ok := du.mutation.Rev6(); ok {
		if err := ddns.Rev6Validator(v); err != nil {
			return &ValidationError{Name: "rev6", err: fmt.Errorf(`ent: validator failed for field "DDNS.rev6": %w`, err)}
		}
	}
	if v, ok := du.mutation.Ipv4(); ok {
		if err := ddns.Ipv4Validator(v); err != nil {
			return &ValidationError{Name: "ipv4", err: fmt.Errorf(`ent: validator failed for field "DDNS.ipv4": %w`, err)}
		}
	}
	if v, ok := du.mutation.Rev4(); ok {
		if err := ddns.Rev4Validator(v); err != nil {
			return &ValidationError{Name: "rev4", err: fmt.Errorf(`ent: validator failed for field "DDNS.rev4": %w`, err)}
		}
	}
	if v, ok := du.mutation.V4script(); ok {
		if err := ddns.V4scriptValidator(v); err != nil {
			return &ValidationError{Name: "v4script", err: fmt.Errorf(`ent: validator failed for field "DDNS.v4script": %w`, err)}
		}
	}
	if v, ok := du.mutation.V4interface(); ok {
		if err := ddns.V4interfaceValidator(v); err != nil {
			return &ValidationError{Name: "v4interface", err: fmt.Errorf(`ent: validator failed for field "DDNS.v4interface": %w`, err)}
		}
	}
	if v, ok := du.mutation.V6script(); ok {
		if err := ddns.V6scriptValidator(v); err != nil {
			return &ValidationError{Name: "v6script", err: fmt.Errorf(`ent: validator failed for field "DDNS.v6script": %w`, err)}
		}
	}
	if v, ok := du.mutation.V6interface(); ok {
		if err := ddns.V6interfaceValidator(v); err != nil {
			return &ValidationError{Name: "v6interface", err: fmt.Errorf(`ent: validator failed for field "DDNS.v6interface": %w`, err)}
		}
	}
	return nil
}

func (du *DDNSUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ddns.Table, ddns.Columns, sqlgraph.NewFieldSpec(ddns.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.V4method(); ok {
		_spec.SetField(ddns.FieldV4method, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedV4method(); ok {
		_spec.AddField(ddns.FieldV4method, field.TypeInt, value)
	}
	if du.mutation.V4methodCleared() {
		_spec.ClearField(ddns.FieldV4method, field.TypeInt)
	}
	if value, ok := du.mutation.V6method(); ok {
		_spec.SetField(ddns.FieldV6method, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedV6method(); ok {
		_spec.AddField(ddns.FieldV6method, field.TypeInt, value)
	}
	if du.mutation.V6methodCleared() {
		_spec.ClearField(ddns.FieldV6method, field.TypeInt)
	}
	if value, ok := du.mutation.Ipv6(); ok {
		_spec.SetField(ddns.FieldIpv6, field.TypeString, value)
	}
	if du.mutation.Ipv6Cleared() {
		_spec.ClearField(ddns.FieldIpv6, field.TypeString)
	}
	if value, ok := du.mutation.Rev6(); ok {
		_spec.SetField(ddns.FieldRev6, field.TypeString, value)
	}
	if du.mutation.Rev6Cleared() {
		_spec.ClearField(ddns.FieldRev6, field.TypeString)
	}
	if value, ok := du.mutation.Ipv4(); ok {
		_spec.SetField(ddns.FieldIpv4, field.TypeString, value)
	}
	if du.mutation.Ipv4Cleared() {
		_spec.ClearField(ddns.FieldIpv4, field.TypeString)
	}
	if value, ok := du.mutation.Rev4(); ok {
		_spec.SetField(ddns.FieldRev4, field.TypeString, value)
	}
	if du.mutation.Rev4Cleared() {
		_spec.ClearField(ddns.FieldRev4, field.TypeString)
	}
	if value, ok := du.mutation.V4script(); ok {
		_spec.SetField(ddns.FieldV4script, field.TypeString, value)
	}
	if du.mutation.V4scriptCleared() {
		_spec.ClearField(ddns.FieldV4script, field.TypeString)
	}
	if value, ok := du.mutation.V4interface(); ok {
		_spec.SetField(ddns.FieldV4interface, field.TypeString, value)
	}
	if du.mutation.V4interfaceCleared() {
		_spec.ClearField(ddns.FieldV4interface, field.TypeString)
	}
	if value, ok := du.mutation.V6script(); ok {
		_spec.SetField(ddns.FieldV6script, field.TypeString, value)
	}
	if du.mutation.V6scriptCleared() {
		_spec.ClearField(ddns.FieldV6script, field.TypeString)
	}
	if value, ok := du.mutation.V6interface(); ok {
		_spec.SetField(ddns.FieldV6interface, field.TypeString, value)
	}
	if du.mutation.V6interfaceCleared() {
		_spec.ClearField(ddns.FieldV6interface, field.TypeString)
	}
	if value, ok := du.mutation.Domains(); ok {
		_spec.SetField(ddns.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := du.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ddns.FieldDomains, value)
		})
	}
	if value, ok := du.mutation.Config(); ok {
		_spec.SetField(ddns.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := du.mutation.Result(); ok {
		_spec.SetField(ddns.FieldResult, field.TypeJSON, value)
	}
	if du.mutation.ResultCleared() {
		_spec.ClearField(ddns.FieldResult, field.TypeJSON)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(ddns.FieldStatus, field.TypeJSON, value)
	}
	if value, ok := du.mutation.Webhook(); ok {
		_spec.SetField(ddns.FieldWebhook, field.TypeJSON, value)
	}
	if du.mutation.WebhookCleared() {
		_spec.ClearField(ddns.FieldWebhook, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ddns.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DDNSUpdateOne is the builder for updating a single DDNS entity.
type DDNSUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DDNSMutation
}

// SetV4method sets the "v4method" field.
func (duo *DDNSUpdateOne) SetV4method(i int) *DDNSUpdateOne {
	duo.mutation.ResetV4method()
	duo.mutation.SetV4method(i)
	return duo
}

// SetNillableV4method sets the "v4method" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableV4method(i *int) *DDNSUpdateOne {
	if i != nil {
		duo.SetV4method(*i)
	}
	return duo
}

// AddV4method adds i to the "v4method" field.
func (duo *DDNSUpdateOne) AddV4method(i int) *DDNSUpdateOne {
	duo.mutation.AddV4method(i)
	return duo
}

// ClearV4method clears the value of the "v4method" field.
func (duo *DDNSUpdateOne) ClearV4method() *DDNSUpdateOne {
	duo.mutation.ClearV4method()
	return duo
}

// SetV6method sets the "v6method" field.
func (duo *DDNSUpdateOne) SetV6method(i int) *DDNSUpdateOne {
	duo.mutation.ResetV6method()
	duo.mutation.SetV6method(i)
	return duo
}

// SetNillableV6method sets the "v6method" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableV6method(i *int) *DDNSUpdateOne {
	if i != nil {
		duo.SetV6method(*i)
	}
	return duo
}

// AddV6method adds i to the "v6method" field.
func (duo *DDNSUpdateOne) AddV6method(i int) *DDNSUpdateOne {
	duo.mutation.AddV6method(i)
	return duo
}

// ClearV6method clears the value of the "v6method" field.
func (duo *DDNSUpdateOne) ClearV6method() *DDNSUpdateOne {
	duo.mutation.ClearV6method()
	return duo
}

// SetIpv6 sets the "ipv6" field.
func (duo *DDNSUpdateOne) SetIpv6(s string) *DDNSUpdateOne {
	duo.mutation.SetIpv6(s)
	return duo
}

// SetNillableIpv6 sets the "ipv6" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableIpv6(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetIpv6(*s)
	}
	return duo
}

// ClearIpv6 clears the value of the "ipv6" field.
func (duo *DDNSUpdateOne) ClearIpv6() *DDNSUpdateOne {
	duo.mutation.ClearIpv6()
	return duo
}

// SetRev6 sets the "rev6" field.
func (duo *DDNSUpdateOne) SetRev6(s string) *DDNSUpdateOne {
	duo.mutation.SetRev6(s)
	return duo
}

// SetNillableRev6 sets the "rev6" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableRev6(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetRev6(*s)
	}
	return duo
}

// ClearRev6 clears the value of the "rev6" field.
func (duo *DDNSUpdateOne) ClearRev6() *DDNSUpdateOne {
	duo.mutation.ClearRev6()
	return duo
}

// SetIpv4 sets the "ipv4" field.
func (duo *DDNSUpdateOne) SetIpv4(s string) *DDNSUpdateOne {
	duo.mutation.SetIpv4(s)
	return duo
}

// SetNillableIpv4 sets the "ipv4" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableIpv4(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetIpv4(*s)
	}
	return duo
}

// ClearIpv4 clears the value of the "ipv4" field.
func (duo *DDNSUpdateOne) ClearIpv4() *DDNSUpdateOne {
	duo.mutation.ClearIpv4()
	return duo
}

// SetRev4 sets the "rev4" field.
func (duo *DDNSUpdateOne) SetRev4(s string) *DDNSUpdateOne {
	duo.mutation.SetRev4(s)
	return duo
}

// SetNillableRev4 sets the "rev4" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableRev4(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetRev4(*s)
	}
	return duo
}

// ClearRev4 clears the value of the "rev4" field.
func (duo *DDNSUpdateOne) ClearRev4() *DDNSUpdateOne {
	duo.mutation.ClearRev4()
	return duo
}

// SetV4script sets the "v4script" field.
func (duo *DDNSUpdateOne) SetV4script(s string) *DDNSUpdateOne {
	duo.mutation.SetV4script(s)
	return duo
}

// SetNillableV4script sets the "v4script" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableV4script(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetV4script(*s)
	}
	return duo
}

// ClearV4script clears the value of the "v4script" field.
func (duo *DDNSUpdateOne) ClearV4script() *DDNSUpdateOne {
	duo.mutation.ClearV4script()
	return duo
}

// SetV4interface sets the "v4interface" field.
func (duo *DDNSUpdateOne) SetV4interface(s string) *DDNSUpdateOne {
	duo.mutation.SetV4interface(s)
	return duo
}

// SetNillableV4interface sets the "v4interface" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableV4interface(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetV4interface(*s)
	}
	return duo
}

// ClearV4interface clears the value of the "v4interface" field.
func (duo *DDNSUpdateOne) ClearV4interface() *DDNSUpdateOne {
	duo.mutation.ClearV4interface()
	return duo
}

// SetV6script sets the "v6script" field.
func (duo *DDNSUpdateOne) SetV6script(s string) *DDNSUpdateOne {
	duo.mutation.SetV6script(s)
	return duo
}

// SetNillableV6script sets the "v6script" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableV6script(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetV6script(*s)
	}
	return duo
}

// ClearV6script clears the value of the "v6script" field.
func (duo *DDNSUpdateOne) ClearV6script() *DDNSUpdateOne {
	duo.mutation.ClearV6script()
	return duo
}

// SetV6interface sets the "v6interface" field.
func (duo *DDNSUpdateOne) SetV6interface(s string) *DDNSUpdateOne {
	duo.mutation.SetV6interface(s)
	return duo
}

// SetNillableV6interface sets the "v6interface" field if the given value is not nil.
func (duo *DDNSUpdateOne) SetNillableV6interface(s *string) *DDNSUpdateOne {
	if s != nil {
		duo.SetV6interface(*s)
	}
	return duo
}

// ClearV6interface clears the value of the "v6interface" field.
func (duo *DDNSUpdateOne) ClearV6interface() *DDNSUpdateOne {
	duo.mutation.ClearV6interface()
	return duo
}

// SetDomains sets the "domains" field.
func (duo *DDNSUpdateOne) SetDomains(s []string) *DDNSUpdateOne {
	duo.mutation.SetDomains(s)
	return duo
}

// AppendDomains appends s to the "domains" field.
func (duo *DDNSUpdateOne) AppendDomains(s []string) *DDNSUpdateOne {
	duo.mutation.AppendDomains(s)
	return duo
}

// SetConfig sets the "config" field.
func (duo *DDNSUpdateOne) SetConfig(m map[string]string) *DDNSUpdateOne {
	duo.mutation.SetConfig(m)
	return duo
}

// SetResult sets the "result" field.
func (duo *DDNSUpdateOne) SetResult(m map[string]string) *DDNSUpdateOne {
	duo.mutation.SetResult(m)
	return duo
}

// ClearResult clears the value of the "result" field.
func (duo *DDNSUpdateOne) ClearResult() *DDNSUpdateOne {
	duo.mutation.ClearResult()
	return duo
}

// SetStatus sets the "status" field.
func (duo *DDNSUpdateOne) SetStatus(m map[string]int) *DDNSUpdateOne {
	duo.mutation.SetStatus(m)
	return duo
}

// SetWebhook sets the "webhook" field.
func (duo *DDNSUpdateOne) SetWebhook(m map[string]string) *DDNSUpdateOne {
	duo.mutation.SetWebhook(m)
	return duo
}

// ClearWebhook clears the value of the "webhook" field.
func (duo *DDNSUpdateOne) ClearWebhook() *DDNSUpdateOne {
	duo.mutation.ClearWebhook()
	return duo
}

// Mutation returns the DDNSMutation object of the builder.
func (duo *DDNSUpdateOne) Mutation() *DDNSMutation {
	return duo.mutation
}

// Where appends a list predicates to the DDNSUpdate builder.
func (duo *DDNSUpdateOne) Where(ps ...predicate.DDNS) *DDNSUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DDNSUpdateOne) Select(field string, fields ...string) *DDNSUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated DDNS entity.
func (duo *DDNSUpdateOne) Save(ctx context.Context) (*DDNS, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DDNSUpdateOne) SaveX(ctx context.Context) *DDNS {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DDNSUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DDNSUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DDNSUpdateOne) check() error {
	if v, ok := duo.mutation.Ipv6(); ok {
		if err := ddns.Ipv6Validator(v); err != nil {
			return &ValidationError{Name: "ipv6", err: fmt.Errorf(`ent: validator failed for field "DDNS.ipv6": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Rev6(); ok {
		if err := ddns.Rev6Validator(v); err != nil {
			return &ValidationError{Name: "rev6", err: fmt.Errorf(`ent: validator failed for field "DDNS.rev6": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Ipv4(); ok {
		if err := ddns.Ipv4Validator(v); err != nil {
			return &ValidationError{Name: "ipv4", err: fmt.Errorf(`ent: validator failed for field "DDNS.ipv4": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Rev4(); ok {
		if err := ddns.Rev4Validator(v); err != nil {
			return &ValidationError{Name: "rev4", err: fmt.Errorf(`ent: validator failed for field "DDNS.rev4": %w`, err)}
		}
	}
	if v, ok := duo.mutation.V4script(); ok {
		if err := ddns.V4scriptValidator(v); err != nil {
			return &ValidationError{Name: "v4script", err: fmt.Errorf(`ent: validator failed for field "DDNS.v4script": %w`, err)}
		}
	}
	if v, ok := duo.mutation.V4interface(); ok {
		if err := ddns.V4interfaceValidator(v); err != nil {
			return &ValidationError{Name: "v4interface", err: fmt.Errorf(`ent: validator failed for field "DDNS.v4interface": %w`, err)}
		}
	}
	if v, ok := duo.mutation.V6script(); ok {
		if err := ddns.V6scriptValidator(v); err != nil {
			return &ValidationError{Name: "v6script", err: fmt.Errorf(`ent: validator failed for field "DDNS.v6script": %w`, err)}
		}
	}
	if v, ok := duo.mutation.V6interface(); ok {
		if err := ddns.V6interfaceValidator(v); err != nil {
			return &ValidationError{Name: "v6interface", err: fmt.Errorf(`ent: validator failed for field "DDNS.v6interface": %w`, err)}
		}
	}
	return nil
}

func (duo *DDNSUpdateOne) sqlSave(ctx context.Context) (_node *DDNS, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ddns.Table, ddns.Columns, sqlgraph.NewFieldSpec(ddns.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DDNS.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ddns.FieldID)
		for _, f := range fields {
			if !ddns.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ddns.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.V4method(); ok {
		_spec.SetField(ddns.FieldV4method, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedV4method(); ok {
		_spec.AddField(ddns.FieldV4method, field.TypeInt, value)
	}
	if duo.mutation.V4methodCleared() {
		_spec.ClearField(ddns.FieldV4method, field.TypeInt)
	}
	if value, ok := duo.mutation.V6method(); ok {
		_spec.SetField(ddns.FieldV6method, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedV6method(); ok {
		_spec.AddField(ddns.FieldV6method, field.TypeInt, value)
	}
	if duo.mutation.V6methodCleared() {
		_spec.ClearField(ddns.FieldV6method, field.TypeInt)
	}
	if value, ok := duo.mutation.Ipv6(); ok {
		_spec.SetField(ddns.FieldIpv6, field.TypeString, value)
	}
	if duo.mutation.Ipv6Cleared() {
		_spec.ClearField(ddns.FieldIpv6, field.TypeString)
	}
	if value, ok := duo.mutation.Rev6(); ok {
		_spec.SetField(ddns.FieldRev6, field.TypeString, value)
	}
	if duo.mutation.Rev6Cleared() {
		_spec.ClearField(ddns.FieldRev6, field.TypeString)
	}
	if value, ok := duo.mutation.Ipv4(); ok {
		_spec.SetField(ddns.FieldIpv4, field.TypeString, value)
	}
	if duo.mutation.Ipv4Cleared() {
		_spec.ClearField(ddns.FieldIpv4, field.TypeString)
	}
	if value, ok := duo.mutation.Rev4(); ok {
		_spec.SetField(ddns.FieldRev4, field.TypeString, value)
	}
	if duo.mutation.Rev4Cleared() {
		_spec.ClearField(ddns.FieldRev4, field.TypeString)
	}
	if value, ok := duo.mutation.V4script(); ok {
		_spec.SetField(ddns.FieldV4script, field.TypeString, value)
	}
	if duo.mutation.V4scriptCleared() {
		_spec.ClearField(ddns.FieldV4script, field.TypeString)
	}
	if value, ok := duo.mutation.V4interface(); ok {
		_spec.SetField(ddns.FieldV4interface, field.TypeString, value)
	}
	if duo.mutation.V4interfaceCleared() {
		_spec.ClearField(ddns.FieldV4interface, field.TypeString)
	}
	if value, ok := duo.mutation.V6script(); ok {
		_spec.SetField(ddns.FieldV6script, field.TypeString, value)
	}
	if duo.mutation.V6scriptCleared() {
		_spec.ClearField(ddns.FieldV6script, field.TypeString)
	}
	if value, ok := duo.mutation.V6interface(); ok {
		_spec.SetField(ddns.FieldV6interface, field.TypeString, value)
	}
	if duo.mutation.V6interfaceCleared() {
		_spec.ClearField(ddns.FieldV6interface, field.TypeString)
	}
	if value, ok := duo.mutation.Domains(); ok {
		_spec.SetField(ddns.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ddns.FieldDomains, value)
		})
	}
	if value, ok := duo.mutation.Config(); ok {
		_spec.SetField(ddns.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.Result(); ok {
		_spec.SetField(ddns.FieldResult, field.TypeJSON, value)
	}
	if duo.mutation.ResultCleared() {
		_spec.ClearField(ddns.FieldResult, field.TypeJSON)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(ddns.FieldStatus, field.TypeJSON, value)
	}
	if value, ok := duo.mutation.Webhook(); ok {
		_spec.SetField(ddns.FieldWebhook, field.TypeJSON, value)
	}
	if duo.mutation.WebhookCleared() {
		_spec.ClearField(ddns.FieldWebhook, field.TypeJSON)
	}
	_node = &DDNS{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ddns.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
