// Code generated by ent, DO NOT EDIT.

package ent

import (
	"sifu-tool/ent/cert"
	"sifu-tool/ent/ddns"
	"sifu-tool/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	certFields := schema.Cert{}.Fields()
	_ = certFields
	// certDescTag is the schema descriptor for tag field.
	certDescTag := certFields[0].Descriptor()
	// cert.TagValidator is a validator for the "tag" field. It is called by the builders before save.
	cert.TagValidator = func() func(string) error {
		validators := certDescTag.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tag string) error {
			for _, fn := range fns {
				if err := fn(tag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	ddnsFields := schema.DDNS{}.Fields()
	_ = ddnsFields
	// ddnsDescIpv6 is the schema descriptor for ipv6 field.
	ddnsDescIpv6 := ddnsFields[2].Descriptor()
	// ddns.Ipv6Validator is a validator for the "ipv6" field. It is called by the builders before save.
	ddns.Ipv6Validator = ddnsDescIpv6.Validators[0].(func(string) error)
	// ddnsDescRev6 is the schema descriptor for rev6 field.
	ddnsDescRev6 := ddnsFields[3].Descriptor()
	// ddns.Rev6Validator is a validator for the "rev6" field. It is called by the builders before save.
	ddns.Rev6Validator = ddnsDescRev6.Validators[0].(func(string) error)
	// ddnsDescIpv4 is the schema descriptor for ipv4 field.
	ddnsDescIpv4 := ddnsFields[4].Descriptor()
	// ddns.Ipv4Validator is a validator for the "ipv4" field. It is called by the builders before save.
	ddns.Ipv4Validator = ddnsDescIpv4.Validators[0].(func(string) error)
	// ddnsDescRev4 is the schema descriptor for rev4 field.
	ddnsDescRev4 := ddnsFields[5].Descriptor()
	// ddns.Rev4Validator is a validator for the "rev4" field. It is called by the builders before save.
	ddns.Rev4Validator = ddnsDescRev4.Validators[0].(func(string) error)
	// ddnsDescV4script is the schema descriptor for v4script field.
	ddnsDescV4script := ddnsFields[6].Descriptor()
	// ddns.V4scriptValidator is a validator for the "v4script" field. It is called by the builders before save.
	ddns.V4scriptValidator = ddnsDescV4script.Validators[0].(func(string) error)
	// ddnsDescV4interface is the schema descriptor for v4interface field.
	ddnsDescV4interface := ddnsFields[7].Descriptor()
	// ddns.V4interfaceValidator is a validator for the "v4interface" field. It is called by the builders before save.
	ddns.V4interfaceValidator = ddnsDescV4interface.Validators[0].(func(string) error)
	// ddnsDescV6script is the schema descriptor for v6script field.
	ddnsDescV6script := ddnsFields[8].Descriptor()
	// ddns.V6scriptValidator is a validator for the "v6script" field. It is called by the builders before save.
	ddns.V6scriptValidator = ddnsDescV6script.Validators[0].(func(string) error)
	// ddnsDescV6interface is the schema descriptor for v6interface field.
	ddnsDescV6interface := ddnsFields[9].Descriptor()
	// ddns.V6interfaceValidator is a validator for the "v6interface" field. It is called by the builders before save.
	ddns.V6interfaceValidator = ddnsDescV6interface.Validators[0].(func(string) error)
}
