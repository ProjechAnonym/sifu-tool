// Code generated by ent, DO NOT EDIT.

package cert

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cert type in the database.
	Label = "cert"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldCert holds the string denoting the cert field in the database.
	FieldCert = "cert"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldAuto holds the string denoting the auto field in the database.
	FieldAuto = "auto"
	// Table holds the table name of the cert in the database.
	Table = "certs"
)

// Columns holds all SQL columns for cert fields.
var Columns = []string{
	FieldID,
	FieldDomains,
	FieldEmail,
	FieldConfig,
	FieldCert,
	FieldKey,
	FieldAuto,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// CertValidator is a validator for the "cert" field. It is called by the builders before save.
	CertValidator func(string) error
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
)

// OrderOption defines the ordering options for the Cert queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByCert orders the results by the cert field.
func ByCert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCert, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByAuto orders the results by the auto field.
func ByAuto(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuto, opts...).ToFunc()
}
