// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sifu-tool/ent/cert"
	"sifu-tool/ent/ddns"
	"sifu-tool/ent/predicate"
	"sifu-tool/models"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCert = "Cert"
	TypeDDNS = "DDNS"
)

// CertMutation represents an operation that mutates the Cert nodes in the graph.
type CertMutation struct {
	config
	op            Op
	typ           string
	id            *int
	domains       *[]string
	appenddomains []string
	email         *string
	_config       *map[string]string
	certPath      *string
	keyPath       *string
	auto          *bool
	result        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Cert, error)
	predicates    []predicate.Cert
}

var _ ent.Mutation = (*CertMutation)(nil)

// certOption allows management of the mutation configuration using functional options.
type certOption func(*CertMutation)

// newCertMutation creates new mutation for the Cert entity.
func newCertMutation(c config, op Op, opts ...certOption) *CertMutation {
	m := &CertMutation{
		config:        c,
		op:            op,
		typ:           TypeCert,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCertID sets the ID field of the mutation.
func withCertID(id int) certOption {
	return func(m *CertMutation) {
		var (
			err   error
			once  sync.Once
			value *Cert
		)
		m.oldValue = func(ctx context.Context) (*Cert, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cert.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCert sets the old Cert of the mutation.
func withCert(node *Cert) certOption {
	return func(m *CertMutation) {
		m.oldValue = func(context.Context) (*Cert, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CertMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CertMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CertMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CertMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cert.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetDomains sets the "domains" field.
func (m *CertMutation) SetDomains(s []string) {
	m.domains = &s
	m.appenddomains = nil
}

// Domains returns the value of the "domains" field in the mutation.
func (m *CertMutation) Domains() (r []string, exists bool) {
	v := m.domains
	if v == nil {
		return
	}
	return *v, true
}

// OldDomains returns the old "domains" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldDomains(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomains is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomains requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomains: %w", err)
	}
	return oldValue.Domains, nil
}

// AppendDomains adds s to the "domains" field.
func (m *CertMutation) AppendDomains(s []string) {
	m.appenddomains = append(m.appenddomains, s...)
}

// AppendedDomains returns the list of values that were appended to the "domains" field in this mutation.
func (m *CertMutation) AppendedDomains() ([]string, bool) {
	if len(m.appenddomains) == 0 {
		return nil, false
	}
	return m.appenddomains, true
}

// ResetDomains resets all changes to the "domains" field.
func (m *CertMutation) ResetDomains() {
	m.domains = nil
	m.appenddomains = nil
}

// SetEmail sets the "email" field.
func (m *CertMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *CertMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *CertMutation) ResetEmail() {
	m.email = nil
}

// SetConfig sets the "config" field.
func (m *CertMutation) SetConfig(value map[string]string) {
	m._config = &value
}

// Config returns the value of the "config" field in the mutation.
func (m *CertMutation) Config() (r map[string]string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldConfig(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *CertMutation) ResetConfig() {
	m._config = nil
}

// SetCertPath sets the "certPath" field.
func (m *CertMutation) SetCertPath(s string) {
	m.certPath = &s
}

// CertPath returns the value of the "certPath" field in the mutation.
func (m *CertMutation) CertPath() (r string, exists bool) {
	v := m.certPath
	if v == nil {
		return
	}
	return *v, true
}

// OldCertPath returns the old "certPath" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldCertPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCertPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCertPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCertPath: %w", err)
	}
	return oldValue.CertPath, nil
}

// ClearCertPath clears the value of the "certPath" field.
func (m *CertMutation) ClearCertPath() {
	m.certPath = nil
	m.clearedFields[cert.FieldCertPath] = struct{}{}
}

// CertPathCleared returns if the "certPath" field was cleared in this mutation.
func (m *CertMutation) CertPathCleared() bool {
	_, ok := m.clearedFields[cert.FieldCertPath]
	return ok
}

// ResetCertPath resets all changes to the "certPath" field.
func (m *CertMutation) ResetCertPath() {
	m.certPath = nil
	delete(m.clearedFields, cert.FieldCertPath)
}

// SetKeyPath sets the "keyPath" field.
func (m *CertMutation) SetKeyPath(s string) {
	m.keyPath = &s
}

// KeyPath returns the value of the "keyPath" field in the mutation.
func (m *CertMutation) KeyPath() (r string, exists bool) {
	v := m.keyPath
	if v == nil {
		return
	}
	return *v, true
}

// OldKeyPath returns the old "keyPath" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldKeyPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKeyPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKeyPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKeyPath: %w", err)
	}
	return oldValue.KeyPath, nil
}

// ClearKeyPath clears the value of the "keyPath" field.
func (m *CertMutation) ClearKeyPath() {
	m.keyPath = nil
	m.clearedFields[cert.FieldKeyPath] = struct{}{}
}

// KeyPathCleared returns if the "keyPath" field was cleared in this mutation.
func (m *CertMutation) KeyPathCleared() bool {
	_, ok := m.clearedFields[cert.FieldKeyPath]
	return ok
}

// ResetKeyPath resets all changes to the "keyPath" field.
func (m *CertMutation) ResetKeyPath() {
	m.keyPath = nil
	delete(m.clearedFields, cert.FieldKeyPath)
}

// SetAuto sets the "auto" field.
func (m *CertMutation) SetAuto(b bool) {
	m.auto = &b
}

// Auto returns the value of the "auto" field in the mutation.
func (m *CertMutation) Auto() (r bool, exists bool) {
	v := m.auto
	if v == nil {
		return
	}
	return *v, true
}

// OldAuto returns the old "auto" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldAuto(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuto is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuto requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuto: %w", err)
	}
	return oldValue.Auto, nil
}

// ResetAuto resets all changes to the "auto" field.
func (m *CertMutation) ResetAuto() {
	m.auto = nil
}

// SetResult sets the "result" field.
func (m *CertMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the value of the "result" field in the mutation.
func (m *CertMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Cert entity.
// If the Cert object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CertMutation) OldResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ClearResult clears the value of the "result" field.
func (m *CertMutation) ClearResult() {
	m.result = nil
	m.clearedFields[cert.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *CertMutation) ResultCleared() bool {
	_, ok := m.clearedFields[cert.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *CertMutation) ResetResult() {
	m.result = nil
	delete(m.clearedFields, cert.FieldResult)
}

// Where appends a list predicates to the CertMutation builder.
func (m *CertMutation) Where(ps ...predicate.Cert) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CertMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CertMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cert, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CertMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CertMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cert).
func (m *CertMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CertMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.domains != nil {
		fields = append(fields, cert.FieldDomains)
	}
	if m.email != nil {
		fields = append(fields, cert.FieldEmail)
	}
	if m._config != nil {
		fields = append(fields, cert.FieldConfig)
	}
	if m.certPath != nil {
		fields = append(fields, cert.FieldCertPath)
	}
	if m.keyPath != nil {
		fields = append(fields, cert.FieldKeyPath)
	}
	if m.auto != nil {
		fields = append(fields, cert.FieldAuto)
	}
	if m.result != nil {
		fields = append(fields, cert.FieldResult)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CertMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cert.FieldDomains:
		return m.Domains()
	case cert.FieldEmail:
		return m.Email()
	case cert.FieldConfig:
		return m.Config()
	case cert.FieldCertPath:
		return m.CertPath()
	case cert.FieldKeyPath:
		return m.KeyPath()
	case cert.FieldAuto:
		return m.Auto()
	case cert.FieldResult:
		return m.Result()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CertMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cert.FieldDomains:
		return m.OldDomains(ctx)
	case cert.FieldEmail:
		return m.OldEmail(ctx)
	case cert.FieldConfig:
		return m.OldConfig(ctx)
	case cert.FieldCertPath:
		return m.OldCertPath(ctx)
	case cert.FieldKeyPath:
		return m.OldKeyPath(ctx)
	case cert.FieldAuto:
		return m.OldAuto(ctx)
	case cert.FieldResult:
		return m.OldResult(ctx)
	}
	return nil, fmt.Errorf("unknown Cert field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CertMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cert.FieldDomains:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomains(v)
		return nil
	case cert.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case cert.FieldConfig:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case cert.FieldCertPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCertPath(v)
		return nil
	case cert.FieldKeyPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKeyPath(v)
		return nil
	case cert.FieldAuto:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuto(v)
		return nil
	case cert.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	}
	return fmt.Errorf("unknown Cert field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CertMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CertMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CertMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Cert numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CertMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cert.FieldCertPath) {
		fields = append(fields, cert.FieldCertPath)
	}
	if m.FieldCleared(cert.FieldKeyPath) {
		fields = append(fields, cert.FieldKeyPath)
	}
	if m.FieldCleared(cert.FieldResult) {
		fields = append(fields, cert.FieldResult)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CertMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CertMutation) ClearField(name string) error {
	switch name {
	case cert.FieldCertPath:
		m.ClearCertPath()
		return nil
	case cert.FieldKeyPath:
		m.ClearKeyPath()
		return nil
	case cert.FieldResult:
		m.ClearResult()
		return nil
	}
	return fmt.Errorf("unknown Cert nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CertMutation) ResetField(name string) error {
	switch name {
	case cert.FieldDomains:
		m.ResetDomains()
		return nil
	case cert.FieldEmail:
		m.ResetEmail()
		return nil
	case cert.FieldConfig:
		m.ResetConfig()
		return nil
	case cert.FieldCertPath:
		m.ResetCertPath()
		return nil
	case cert.FieldKeyPath:
		m.ResetKeyPath()
		return nil
	case cert.FieldAuto:
		m.ResetAuto()
		return nil
	case cert.FieldResult:
		m.ResetResult()
		return nil
	}
	return fmt.Errorf("unknown Cert field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CertMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CertMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CertMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CertMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CertMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CertMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CertMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Cert unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CertMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Cert edge %s", name)
}

// DDNSMutation represents an operation that mutates the DDNS nodes in the graph.
type DDNSMutation struct {
	config
	op            Op
	typ           string
	id            *int
	v4method      *int
	addv4method   *int
	v6method      *int
	addv6method   *int
	ipv6          *string
	rev6          *string
	ipv4          *string
	rev4          *string
	v4script      *string
	v4interface   *string
	v6script      *string
	v6interface   *string
	domains       *[]models.Domain
	appenddomains []models.Domain
	_config       *map[string]string
	webhook       *map[string]string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*DDNS, error)
	predicates    []predicate.DDNS
}

var _ ent.Mutation = (*DDNSMutation)(nil)

// ddnsOption allows management of the mutation configuration using functional options.
type ddnsOption func(*DDNSMutation)

// newDDNSMutation creates new mutation for the DDNS entity.
func newDDNSMutation(c config, op Op, opts ...ddnsOption) *DDNSMutation {
	m := &DDNSMutation{
		config:        c,
		op:            op,
		typ:           TypeDDNS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDDNSID sets the ID field of the mutation.
func withDDNSID(id int) ddnsOption {
	return func(m *DDNSMutation) {
		var (
			err   error
			once  sync.Once
			value *DDNS
		)
		m.oldValue = func(ctx context.Context) (*DDNS, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DDNS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDDNS sets the old DDNS of the mutation.
func withDDNS(node *DDNS) ddnsOption {
	return func(m *DDNSMutation) {
		m.oldValue = func(context.Context) (*DDNS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DDNSMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DDNSMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DDNSMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DDNSMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DDNS.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetV4method sets the "v4method" field.
func (m *DDNSMutation) SetV4method(i int) {
	m.v4method = &i
	m.addv4method = nil
}

// V4method returns the value of the "v4method" field in the mutation.
func (m *DDNSMutation) V4method() (r int, exists bool) {
	v := m.v4method
	if v == nil {
		return
	}
	return *v, true
}

// OldV4method returns the old "v4method" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldV4method(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV4method is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV4method requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV4method: %w", err)
	}
	return oldValue.V4method, nil
}

// AddV4method adds i to the "v4method" field.
func (m *DDNSMutation) AddV4method(i int) {
	if m.addv4method != nil {
		*m.addv4method += i
	} else {
		m.addv4method = &i
	}
}

// AddedV4method returns the value that was added to the "v4method" field in this mutation.
func (m *DDNSMutation) AddedV4method() (r int, exists bool) {
	v := m.addv4method
	if v == nil {
		return
	}
	return *v, true
}

// ClearV4method clears the value of the "v4method" field.
func (m *DDNSMutation) ClearV4method() {
	m.v4method = nil
	m.addv4method = nil
	m.clearedFields[ddns.FieldV4method] = struct{}{}
}

// V4methodCleared returns if the "v4method" field was cleared in this mutation.
func (m *DDNSMutation) V4methodCleared() bool {
	_, ok := m.clearedFields[ddns.FieldV4method]
	return ok
}

// ResetV4method resets all changes to the "v4method" field.
func (m *DDNSMutation) ResetV4method() {
	m.v4method = nil
	m.addv4method = nil
	delete(m.clearedFields, ddns.FieldV4method)
}

// SetV6method sets the "v6method" field.
func (m *DDNSMutation) SetV6method(i int) {
	m.v6method = &i
	m.addv6method = nil
}

// V6method returns the value of the "v6method" field in the mutation.
func (m *DDNSMutation) V6method() (r int, exists bool) {
	v := m.v6method
	if v == nil {
		return
	}
	return *v, true
}

// OldV6method returns the old "v6method" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldV6method(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV6method is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV6method requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV6method: %w", err)
	}
	return oldValue.V6method, nil
}

// AddV6method adds i to the "v6method" field.
func (m *DDNSMutation) AddV6method(i int) {
	if m.addv6method != nil {
		*m.addv6method += i
	} else {
		m.addv6method = &i
	}
}

// AddedV6method returns the value that was added to the "v6method" field in this mutation.
func (m *DDNSMutation) AddedV6method() (r int, exists bool) {
	v := m.addv6method
	if v == nil {
		return
	}
	return *v, true
}

// ClearV6method clears the value of the "v6method" field.
func (m *DDNSMutation) ClearV6method() {
	m.v6method = nil
	m.addv6method = nil
	m.clearedFields[ddns.FieldV6method] = struct{}{}
}

// V6methodCleared returns if the "v6method" field was cleared in this mutation.
func (m *DDNSMutation) V6methodCleared() bool {
	_, ok := m.clearedFields[ddns.FieldV6method]
	return ok
}

// ResetV6method resets all changes to the "v6method" field.
func (m *DDNSMutation) ResetV6method() {
	m.v6method = nil
	m.addv6method = nil
	delete(m.clearedFields, ddns.FieldV6method)
}

// SetIpv6 sets the "ipv6" field.
func (m *DDNSMutation) SetIpv6(s string) {
	m.ipv6 = &s
}

// Ipv6 returns the value of the "ipv6" field in the mutation.
func (m *DDNSMutation) Ipv6() (r string, exists bool) {
	v := m.ipv6
	if v == nil {
		return
	}
	return *v, true
}

// OldIpv6 returns the old "ipv6" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldIpv6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIpv6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIpv6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIpv6: %w", err)
	}
	return oldValue.Ipv6, nil
}

// ClearIpv6 clears the value of the "ipv6" field.
func (m *DDNSMutation) ClearIpv6() {
	m.ipv6 = nil
	m.clearedFields[ddns.FieldIpv6] = struct{}{}
}

// Ipv6Cleared returns if the "ipv6" field was cleared in this mutation.
func (m *DDNSMutation) Ipv6Cleared() bool {
	_, ok := m.clearedFields[ddns.FieldIpv6]
	return ok
}

// ResetIpv6 resets all changes to the "ipv6" field.
func (m *DDNSMutation) ResetIpv6() {
	m.ipv6 = nil
	delete(m.clearedFields, ddns.FieldIpv6)
}

// SetRev6 sets the "rev6" field.
func (m *DDNSMutation) SetRev6(s string) {
	m.rev6 = &s
}

// Rev6 returns the value of the "rev6" field in the mutation.
func (m *DDNSMutation) Rev6() (r string, exists bool) {
	v := m.rev6
	if v == nil {
		return
	}
	return *v, true
}

// OldRev6 returns the old "rev6" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldRev6(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRev6 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRev6 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRev6: %w", err)
	}
	return oldValue.Rev6, nil
}

// ClearRev6 clears the value of the "rev6" field.
func (m *DDNSMutation) ClearRev6() {
	m.rev6 = nil
	m.clearedFields[ddns.FieldRev6] = struct{}{}
}

// Rev6Cleared returns if the "rev6" field was cleared in this mutation.
func (m *DDNSMutation) Rev6Cleared() bool {
	_, ok := m.clearedFields[ddns.FieldRev6]
	return ok
}

// ResetRev6 resets all changes to the "rev6" field.
func (m *DDNSMutation) ResetRev6() {
	m.rev6 = nil
	delete(m.clearedFields, ddns.FieldRev6)
}

// SetIpv4 sets the "ipv4" field.
func (m *DDNSMutation) SetIpv4(s string) {
	m.ipv4 = &s
}

// Ipv4 returns the value of the "ipv4" field in the mutation.
func (m *DDNSMutation) Ipv4() (r string, exists bool) {
	v := m.ipv4
	if v == nil {
		return
	}
	return *v, true
}

// OldIpv4 returns the old "ipv4" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldIpv4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIpv4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIpv4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIpv4: %w", err)
	}
	return oldValue.Ipv4, nil
}

// ClearIpv4 clears the value of the "ipv4" field.
func (m *DDNSMutation) ClearIpv4() {
	m.ipv4 = nil
	m.clearedFields[ddns.FieldIpv4] = struct{}{}
}

// Ipv4Cleared returns if the "ipv4" field was cleared in this mutation.
func (m *DDNSMutation) Ipv4Cleared() bool {
	_, ok := m.clearedFields[ddns.FieldIpv4]
	return ok
}

// ResetIpv4 resets all changes to the "ipv4" field.
func (m *DDNSMutation) ResetIpv4() {
	m.ipv4 = nil
	delete(m.clearedFields, ddns.FieldIpv4)
}

// SetRev4 sets the "rev4" field.
func (m *DDNSMutation) SetRev4(s string) {
	m.rev4 = &s
}

// Rev4 returns the value of the "rev4" field in the mutation.
func (m *DDNSMutation) Rev4() (r string, exists bool) {
	v := m.rev4
	if v == nil {
		return
	}
	return *v, true
}

// OldRev4 returns the old "rev4" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldRev4(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRev4 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRev4 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRev4: %w", err)
	}
	return oldValue.Rev4, nil
}

// ClearRev4 clears the value of the "rev4" field.
func (m *DDNSMutation) ClearRev4() {
	m.rev4 = nil
	m.clearedFields[ddns.FieldRev4] = struct{}{}
}

// Rev4Cleared returns if the "rev4" field was cleared in this mutation.
func (m *DDNSMutation) Rev4Cleared() bool {
	_, ok := m.clearedFields[ddns.FieldRev4]
	return ok
}

// ResetRev4 resets all changes to the "rev4" field.
func (m *DDNSMutation) ResetRev4() {
	m.rev4 = nil
	delete(m.clearedFields, ddns.FieldRev4)
}

// SetV4script sets the "v4script" field.
func (m *DDNSMutation) SetV4script(s string) {
	m.v4script = &s
}

// V4script returns the value of the "v4script" field in the mutation.
func (m *DDNSMutation) V4script() (r string, exists bool) {
	v := m.v4script
	if v == nil {
		return
	}
	return *v, true
}

// OldV4script returns the old "v4script" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldV4script(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV4script is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV4script requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV4script: %w", err)
	}
	return oldValue.V4script, nil
}

// ClearV4script clears the value of the "v4script" field.
func (m *DDNSMutation) ClearV4script() {
	m.v4script = nil
	m.clearedFields[ddns.FieldV4script] = struct{}{}
}

// V4scriptCleared returns if the "v4script" field was cleared in this mutation.
func (m *DDNSMutation) V4scriptCleared() bool {
	_, ok := m.clearedFields[ddns.FieldV4script]
	return ok
}

// ResetV4script resets all changes to the "v4script" field.
func (m *DDNSMutation) ResetV4script() {
	m.v4script = nil
	delete(m.clearedFields, ddns.FieldV4script)
}

// SetV4interface sets the "v4interface" field.
func (m *DDNSMutation) SetV4interface(s string) {
	m.v4interface = &s
}

// V4interface returns the value of the "v4interface" field in the mutation.
func (m *DDNSMutation) V4interface() (r string, exists bool) {
	v := m.v4interface
	if v == nil {
		return
	}
	return *v, true
}

// OldV4interface returns the old "v4interface" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldV4interface(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV4interface is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV4interface requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV4interface: %w", err)
	}
	return oldValue.V4interface, nil
}

// ClearV4interface clears the value of the "v4interface" field.
func (m *DDNSMutation) ClearV4interface() {
	m.v4interface = nil
	m.clearedFields[ddns.FieldV4interface] = struct{}{}
}

// V4interfaceCleared returns if the "v4interface" field was cleared in this mutation.
func (m *DDNSMutation) V4interfaceCleared() bool {
	_, ok := m.clearedFields[ddns.FieldV4interface]
	return ok
}

// ResetV4interface resets all changes to the "v4interface" field.
func (m *DDNSMutation) ResetV4interface() {
	m.v4interface = nil
	delete(m.clearedFields, ddns.FieldV4interface)
}

// SetV6script sets the "v6script" field.
func (m *DDNSMutation) SetV6script(s string) {
	m.v6script = &s
}

// V6script returns the value of the "v6script" field in the mutation.
func (m *DDNSMutation) V6script() (r string, exists bool) {
	v := m.v6script
	if v == nil {
		return
	}
	return *v, true
}

// OldV6script returns the old "v6script" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldV6script(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV6script is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV6script requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV6script: %w", err)
	}
	return oldValue.V6script, nil
}

// ClearV6script clears the value of the "v6script" field.
func (m *DDNSMutation) ClearV6script() {
	m.v6script = nil
	m.clearedFields[ddns.FieldV6script] = struct{}{}
}

// V6scriptCleared returns if the "v6script" field was cleared in this mutation.
func (m *DDNSMutation) V6scriptCleared() bool {
	_, ok := m.clearedFields[ddns.FieldV6script]
	return ok
}

// ResetV6script resets all changes to the "v6script" field.
func (m *DDNSMutation) ResetV6script() {
	m.v6script = nil
	delete(m.clearedFields, ddns.FieldV6script)
}

// SetV6interface sets the "v6interface" field.
func (m *DDNSMutation) SetV6interface(s string) {
	m.v6interface = &s
}

// V6interface returns the value of the "v6interface" field in the mutation.
func (m *DDNSMutation) V6interface() (r string, exists bool) {
	v := m.v6interface
	if v == nil {
		return
	}
	return *v, true
}

// OldV6interface returns the old "v6interface" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldV6interface(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldV6interface is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldV6interface requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldV6interface: %w", err)
	}
	return oldValue.V6interface, nil
}

// ClearV6interface clears the value of the "v6interface" field.
func (m *DDNSMutation) ClearV6interface() {
	m.v6interface = nil
	m.clearedFields[ddns.FieldV6interface] = struct{}{}
}

// V6interfaceCleared returns if the "v6interface" field was cleared in this mutation.
func (m *DDNSMutation) V6interfaceCleared() bool {
	_, ok := m.clearedFields[ddns.FieldV6interface]
	return ok
}

// ResetV6interface resets all changes to the "v6interface" field.
func (m *DDNSMutation) ResetV6interface() {
	m.v6interface = nil
	delete(m.clearedFields, ddns.FieldV6interface)
}

// SetDomains sets the "domains" field.
func (m *DDNSMutation) SetDomains(value []models.Domain) {
	m.domains = &value
	m.appenddomains = nil
}

// Domains returns the value of the "domains" field in the mutation.
func (m *DDNSMutation) Domains() (r []models.Domain, exists bool) {
	v := m.domains
	if v == nil {
		return
	}
	return *v, true
}

// OldDomains returns the old "domains" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldDomains(ctx context.Context) (v []models.Domain, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomains is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomains requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomains: %w", err)
	}
	return oldValue.Domains, nil
}

// AppendDomains adds value to the "domains" field.
func (m *DDNSMutation) AppendDomains(value []models.Domain) {
	m.appenddomains = append(m.appenddomains, value...)
}

// AppendedDomains returns the list of values that were appended to the "domains" field in this mutation.
func (m *DDNSMutation) AppendedDomains() ([]models.Domain, bool) {
	if len(m.appenddomains) == 0 {
		return nil, false
	}
	return m.appenddomains, true
}

// ResetDomains resets all changes to the "domains" field.
func (m *DDNSMutation) ResetDomains() {
	m.domains = nil
	m.appenddomains = nil
}

// SetConfig sets the "config" field.
func (m *DDNSMutation) SetConfig(value map[string]string) {
	m._config = &value
}

// Config returns the value of the "config" field in the mutation.
func (m *DDNSMutation) Config() (r map[string]string, exists bool) {
	v := m._config
	if v == nil {
		return
	}
	return *v, true
}

// OldConfig returns the old "config" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldConfig(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfig: %w", err)
	}
	return oldValue.Config, nil
}

// ResetConfig resets all changes to the "config" field.
func (m *DDNSMutation) ResetConfig() {
	m._config = nil
}

// SetWebhook sets the "webhook" field.
func (m *DDNSMutation) SetWebhook(value map[string]string) {
	m.webhook = &value
}

// Webhook returns the value of the "webhook" field in the mutation.
func (m *DDNSMutation) Webhook() (r map[string]string, exists bool) {
	v := m.webhook
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhook returns the old "webhook" field's value of the DDNS entity.
// If the DDNS object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DDNSMutation) OldWebhook(ctx context.Context) (v map[string]string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebhook is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebhook requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhook: %w", err)
	}
	return oldValue.Webhook, nil
}

// ClearWebhook clears the value of the "webhook" field.
func (m *DDNSMutation) ClearWebhook() {
	m.webhook = nil
	m.clearedFields[ddns.FieldWebhook] = struct{}{}
}

// WebhookCleared returns if the "webhook" field was cleared in this mutation.
func (m *DDNSMutation) WebhookCleared() bool {
	_, ok := m.clearedFields[ddns.FieldWebhook]
	return ok
}

// ResetWebhook resets all changes to the "webhook" field.
func (m *DDNSMutation) ResetWebhook() {
	m.webhook = nil
	delete(m.clearedFields, ddns.FieldWebhook)
}

// Where appends a list predicates to the DDNSMutation builder.
func (m *DDNSMutation) Where(ps ...predicate.DDNS) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DDNSMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DDNSMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DDNS, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DDNSMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DDNSMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DDNS).
func (m *DDNSMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DDNSMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.v4method != nil {
		fields = append(fields, ddns.FieldV4method)
	}
	if m.v6method != nil {
		fields = append(fields, ddns.FieldV6method)
	}
	if m.ipv6 != nil {
		fields = append(fields, ddns.FieldIpv6)
	}
	if m.rev6 != nil {
		fields = append(fields, ddns.FieldRev6)
	}
	if m.ipv4 != nil {
		fields = append(fields, ddns.FieldIpv4)
	}
	if m.rev4 != nil {
		fields = append(fields, ddns.FieldRev4)
	}
	if m.v4script != nil {
		fields = append(fields, ddns.FieldV4script)
	}
	if m.v4interface != nil {
		fields = append(fields, ddns.FieldV4interface)
	}
	if m.v6script != nil {
		fields = append(fields, ddns.FieldV6script)
	}
	if m.v6interface != nil {
		fields = append(fields, ddns.FieldV6interface)
	}
	if m.domains != nil {
		fields = append(fields, ddns.FieldDomains)
	}
	if m._config != nil {
		fields = append(fields, ddns.FieldConfig)
	}
	if m.webhook != nil {
		fields = append(fields, ddns.FieldWebhook)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DDNSMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ddns.FieldV4method:
		return m.V4method()
	case ddns.FieldV6method:
		return m.V6method()
	case ddns.FieldIpv6:
		return m.Ipv6()
	case ddns.FieldRev6:
		return m.Rev6()
	case ddns.FieldIpv4:
		return m.Ipv4()
	case ddns.FieldRev4:
		return m.Rev4()
	case ddns.FieldV4script:
		return m.V4script()
	case ddns.FieldV4interface:
		return m.V4interface()
	case ddns.FieldV6script:
		return m.V6script()
	case ddns.FieldV6interface:
		return m.V6interface()
	case ddns.FieldDomains:
		return m.Domains()
	case ddns.FieldConfig:
		return m.Config()
	case ddns.FieldWebhook:
		return m.Webhook()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DDNSMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ddns.FieldV4method:
		return m.OldV4method(ctx)
	case ddns.FieldV6method:
		return m.OldV6method(ctx)
	case ddns.FieldIpv6:
		return m.OldIpv6(ctx)
	case ddns.FieldRev6:
		return m.OldRev6(ctx)
	case ddns.FieldIpv4:
		return m.OldIpv4(ctx)
	case ddns.FieldRev4:
		return m.OldRev4(ctx)
	case ddns.FieldV4script:
		return m.OldV4script(ctx)
	case ddns.FieldV4interface:
		return m.OldV4interface(ctx)
	case ddns.FieldV6script:
		return m.OldV6script(ctx)
	case ddns.FieldV6interface:
		return m.OldV6interface(ctx)
	case ddns.FieldDomains:
		return m.OldDomains(ctx)
	case ddns.FieldConfig:
		return m.OldConfig(ctx)
	case ddns.FieldWebhook:
		return m.OldWebhook(ctx)
	}
	return nil, fmt.Errorf("unknown DDNS field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DDNSMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ddns.FieldV4method:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV4method(v)
		return nil
	case ddns.FieldV6method:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV6method(v)
		return nil
	case ddns.FieldIpv6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIpv6(v)
		return nil
	case ddns.FieldRev6:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRev6(v)
		return nil
	case ddns.FieldIpv4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIpv4(v)
		return nil
	case ddns.FieldRev4:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRev4(v)
		return nil
	case ddns.FieldV4script:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV4script(v)
		return nil
	case ddns.FieldV4interface:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV4interface(v)
		return nil
	case ddns.FieldV6script:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV6script(v)
		return nil
	case ddns.FieldV6interface:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetV6interface(v)
		return nil
	case ddns.FieldDomains:
		v, ok := value.([]models.Domain)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomains(v)
		return nil
	case ddns.FieldConfig:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfig(v)
		return nil
	case ddns.FieldWebhook:
		v, ok := value.(map[string]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhook(v)
		return nil
	}
	return fmt.Errorf("unknown DDNS field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DDNSMutation) AddedFields() []string {
	var fields []string
	if m.addv4method != nil {
		fields = append(fields, ddns.FieldV4method)
	}
	if m.addv6method != nil {
		fields = append(fields, ddns.FieldV6method)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DDNSMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ddns.FieldV4method:
		return m.AddedV4method()
	case ddns.FieldV6method:
		return m.AddedV6method()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DDNSMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ddns.FieldV4method:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddV4method(v)
		return nil
	case ddns.FieldV6method:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddV6method(v)
		return nil
	}
	return fmt.Errorf("unknown DDNS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DDNSMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ddns.FieldV4method) {
		fields = append(fields, ddns.FieldV4method)
	}
	if m.FieldCleared(ddns.FieldV6method) {
		fields = append(fields, ddns.FieldV6method)
	}
	if m.FieldCleared(ddns.FieldIpv6) {
		fields = append(fields, ddns.FieldIpv6)
	}
	if m.FieldCleared(ddns.FieldRev6) {
		fields = append(fields, ddns.FieldRev6)
	}
	if m.FieldCleared(ddns.FieldIpv4) {
		fields = append(fields, ddns.FieldIpv4)
	}
	if m.FieldCleared(ddns.FieldRev4) {
		fields = append(fields, ddns.FieldRev4)
	}
	if m.FieldCleared(ddns.FieldV4script) {
		fields = append(fields, ddns.FieldV4script)
	}
	if m.FieldCleared(ddns.FieldV4interface) {
		fields = append(fields, ddns.FieldV4interface)
	}
	if m.FieldCleared(ddns.FieldV6script) {
		fields = append(fields, ddns.FieldV6script)
	}
	if m.FieldCleared(ddns.FieldV6interface) {
		fields = append(fields, ddns.FieldV6interface)
	}
	if m.FieldCleared(ddns.FieldWebhook) {
		fields = append(fields, ddns.FieldWebhook)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DDNSMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DDNSMutation) ClearField(name string) error {
	switch name {
	case ddns.FieldV4method:
		m.ClearV4method()
		return nil
	case ddns.FieldV6method:
		m.ClearV6method()
		return nil
	case ddns.FieldIpv6:
		m.ClearIpv6()
		return nil
	case ddns.FieldRev6:
		m.ClearRev6()
		return nil
	case ddns.FieldIpv4:
		m.ClearIpv4()
		return nil
	case ddns.FieldRev4:
		m.ClearRev4()
		return nil
	case ddns.FieldV4script:
		m.ClearV4script()
		return nil
	case ddns.FieldV4interface:
		m.ClearV4interface()
		return nil
	case ddns.FieldV6script:
		m.ClearV6script()
		return nil
	case ddns.FieldV6interface:
		m.ClearV6interface()
		return nil
	case ddns.FieldWebhook:
		m.ClearWebhook()
		return nil
	}
	return fmt.Errorf("unknown DDNS nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DDNSMutation) ResetField(name string) error {
	switch name {
	case ddns.FieldV4method:
		m.ResetV4method()
		return nil
	case ddns.FieldV6method:
		m.ResetV6method()
		return nil
	case ddns.FieldIpv6:
		m.ResetIpv6()
		return nil
	case ddns.FieldRev6:
		m.ResetRev6()
		return nil
	case ddns.FieldIpv4:
		m.ResetIpv4()
		return nil
	case ddns.FieldRev4:
		m.ResetRev4()
		return nil
	case ddns.FieldV4script:
		m.ResetV4script()
		return nil
	case ddns.FieldV4interface:
		m.ResetV4interface()
		return nil
	case ddns.FieldV6script:
		m.ResetV6script()
		return nil
	case ddns.FieldV6interface:
		m.ResetV6interface()
		return nil
	case ddns.FieldDomains:
		m.ResetDomains()
		return nil
	case ddns.FieldConfig:
		m.ResetConfig()
		return nil
	case ddns.FieldWebhook:
		m.ResetWebhook()
		return nil
	}
	return fmt.Errorf("unknown DDNS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DDNSMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DDNSMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DDNSMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DDNSMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DDNSMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DDNSMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DDNSMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DDNS unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DDNSMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DDNS edge %s", name)
}
