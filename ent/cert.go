// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"sifu-tool/ent/cert"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Cert is the model entity for the Cert schema.
type Cert struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Domains holds the value of the "domains" field.
	Domains []string `json:"domains,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]string `json:"config,omitempty"`
	// CertPath holds the value of the "certPath" field.
	CertPath string `json:"certPath,omitempty"`
	// KeyPath holds the value of the "keyPath" field.
	KeyPath string `json:"keyPath,omitempty"`
	// Auto holds the value of the "auto" field.
	Auto bool `json:"auto,omitempty"`
	// Result holds the value of the "result" field.
	Result       string `json:"result,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cert) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cert.FieldDomains, cert.FieldConfig:
			values[i] = new([]byte)
		case cert.FieldAuto:
			values[i] = new(sql.NullBool)
		case cert.FieldID:
			values[i] = new(sql.NullInt64)
		case cert.FieldEmail, cert.FieldCertPath, cert.FieldKeyPath, cert.FieldResult:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cert fields.
func (c *Cert) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cert.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cert.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case cert.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				c.Email = value.String
			}
		case cert.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case cert.FieldCertPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field certPath", values[i])
			} else if value.Valid {
				c.CertPath = value.String
			}
		case cert.FieldKeyPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field keyPath", values[i])
			} else if value.Valid {
				c.KeyPath = value.String
			}
		case cert.FieldAuto:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field auto", values[i])
			} else if value.Valid {
				c.Auto = value.Bool
			}
		case cert.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				c.Result = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cert.
// This includes values selected through modifiers, order, etc.
func (c *Cert) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Cert.
// Note that you need to call Cert.Unwrap() before calling this method if this Cert
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cert) Update() *CertUpdateOne {
	return NewCertClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cert entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cert) Unwrap() *Cert {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cert is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cert) String() string {
	var builder strings.Builder
	builder.WriteString("Cert(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", c.Domains))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(c.Email)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", c.Config))
	builder.WriteString(", ")
	builder.WriteString("certPath=")
	builder.WriteString(c.CertPath)
	builder.WriteString(", ")
	builder.WriteString("keyPath=")
	builder.WriteString(c.KeyPath)
	builder.WriteString(", ")
	builder.WriteString("auto=")
	builder.WriteString(fmt.Sprintf("%v", c.Auto))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(c.Result)
	builder.WriteByte(')')
	return builder.String()
}

// Certs is a parsable slice of Cert.
type Certs []*Cert
