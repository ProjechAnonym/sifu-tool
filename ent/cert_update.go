// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sifu-tool/ent/cert"
	"sifu-tool/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// CertUpdate is the builder for updating Cert entities.
type CertUpdate struct {
	config
	hooks    []Hook
	mutation *CertMutation
}

// Where appends a list predicates to the CertUpdate builder.
func (cu *CertUpdate) Where(ps ...predicate.Cert) *CertUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetDomains sets the "domains" field.
func (cu *CertUpdate) SetDomains(s []string) *CertUpdate {
	cu.mutation.SetDomains(s)
	return cu
}

// AppendDomains appends s to the "domains" field.
func (cu *CertUpdate) AppendDomains(s []string) *CertUpdate {
	cu.mutation.AppendDomains(s)
	return cu
}

// SetEmail sets the "email" field.
func (cu *CertUpdate) SetEmail(s string) *CertUpdate {
	cu.mutation.SetEmail(s)
	return cu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cu *CertUpdate) SetNillableEmail(s *string) *CertUpdate {
	if s != nil {
		cu.SetEmail(*s)
	}
	return cu
}

// SetConfig sets the "config" field.
func (cu *CertUpdate) SetConfig(m map[string]string) *CertUpdate {
	cu.mutation.SetConfig(m)
	return cu
}

// SetCertPath sets the "certPath" field.
func (cu *CertUpdate) SetCertPath(s string) *CertUpdate {
	cu.mutation.SetCertPath(s)
	return cu
}

// SetNillableCertPath sets the "certPath" field if the given value is not nil.
func (cu *CertUpdate) SetNillableCertPath(s *string) *CertUpdate {
	if s != nil {
		cu.SetCertPath(*s)
	}
	return cu
}

// ClearCertPath clears the value of the "certPath" field.
func (cu *CertUpdate) ClearCertPath() *CertUpdate {
	cu.mutation.ClearCertPath()
	return cu
}

// SetKeyPath sets the "keyPath" field.
func (cu *CertUpdate) SetKeyPath(s string) *CertUpdate {
	cu.mutation.SetKeyPath(s)
	return cu
}

// SetNillableKeyPath sets the "keyPath" field if the given value is not nil.
func (cu *CertUpdate) SetNillableKeyPath(s *string) *CertUpdate {
	if s != nil {
		cu.SetKeyPath(*s)
	}
	return cu
}

// ClearKeyPath clears the value of the "keyPath" field.
func (cu *CertUpdate) ClearKeyPath() *CertUpdate {
	cu.mutation.ClearKeyPath()
	return cu
}

// SetAuto sets the "auto" field.
func (cu *CertUpdate) SetAuto(b bool) *CertUpdate {
	cu.mutation.SetAuto(b)
	return cu
}

// SetNillableAuto sets the "auto" field if the given value is not nil.
func (cu *CertUpdate) SetNillableAuto(b *bool) *CertUpdate {
	if b != nil {
		cu.SetAuto(*b)
	}
	return cu
}

// SetResult sets the "result" field.
func (cu *CertUpdate) SetResult(s string) *CertUpdate {
	cu.mutation.SetResult(s)
	return cu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (cu *CertUpdate) SetNillableResult(s *string) *CertUpdate {
	if s != nil {
		cu.SetResult(*s)
	}
	return cu
}

// ClearResult clears the value of the "result" field.
func (cu *CertUpdate) ClearResult() *CertUpdate {
	cu.mutation.ClearResult()
	return cu
}

// Mutation returns the CertMutation object of the builder.
func (cu *CertUpdate) Mutation() *CertMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CertUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CertUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CertUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CertUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CertUpdate) check() error {
	if v, ok := cu.mutation.Email(); ok {
		if err := cert.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Cert.email": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CertPath(); ok {
		if err := cert.CertPathValidator(v); err != nil {
			return &ValidationError{Name: "certPath", err: fmt.Errorf(`ent: validator failed for field "Cert.certPath": %w`, err)}
		}
	}
	if v, ok := cu.mutation.KeyPath(); ok {
		if err := cert.KeyPathValidator(v); err != nil {
			return &ValidationError{Name: "keyPath", err: fmt.Errorf(`ent: validator failed for field "Cert.keyPath": %w`, err)}
		}
	}
	return nil
}

func (cu *CertUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cert.Table, cert.Columns, sqlgraph.NewFieldSpec(cert.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Domains(); ok {
		_spec.SetField(cert.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cert.FieldDomains, value)
		})
	}
	if value, ok := cu.mutation.Email(); ok {
		_spec.SetField(cert.FieldEmail, field.TypeString, value)
	}
	if value, ok := cu.mutation.Config(); ok {
		_spec.SetField(cert.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := cu.mutation.CertPath(); ok {
		_spec.SetField(cert.FieldCertPath, field.TypeString, value)
	}
	if cu.mutation.CertPathCleared() {
		_spec.ClearField(cert.FieldCertPath, field.TypeString)
	}
	if value, ok := cu.mutation.KeyPath(); ok {
		_spec.SetField(cert.FieldKeyPath, field.TypeString, value)
	}
	if cu.mutation.KeyPathCleared() {
		_spec.ClearField(cert.FieldKeyPath, field.TypeString)
	}
	if value, ok := cu.mutation.Auto(); ok {
		_spec.SetField(cert.FieldAuto, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Result(); ok {
		_spec.SetField(cert.FieldResult, field.TypeString, value)
	}
	if cu.mutation.ResultCleared() {
		_spec.ClearField(cert.FieldResult, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CertUpdateOne is the builder for updating a single Cert entity.
type CertUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CertMutation
}

// SetDomains sets the "domains" field.
func (cuo *CertUpdateOne) SetDomains(s []string) *CertUpdateOne {
	cuo.mutation.SetDomains(s)
	return cuo
}

// AppendDomains appends s to the "domains" field.
func (cuo *CertUpdateOne) AppendDomains(s []string) *CertUpdateOne {
	cuo.mutation.AppendDomains(s)
	return cuo
}

// SetEmail sets the "email" field.
func (cuo *CertUpdateOne) SetEmail(s string) *CertUpdateOne {
	cuo.mutation.SetEmail(s)
	return cuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (cuo *CertUpdateOne) SetNillableEmail(s *string) *CertUpdateOne {
	if s != nil {
		cuo.SetEmail(*s)
	}
	return cuo
}

// SetConfig sets the "config" field.
func (cuo *CertUpdateOne) SetConfig(m map[string]string) *CertUpdateOne {
	cuo.mutation.SetConfig(m)
	return cuo
}

// SetCertPath sets the "certPath" field.
func (cuo *CertUpdateOne) SetCertPath(s string) *CertUpdateOne {
	cuo.mutation.SetCertPath(s)
	return cuo
}

// SetNillableCertPath sets the "certPath" field if the given value is not nil.
func (cuo *CertUpdateOne) SetNillableCertPath(s *string) *CertUpdateOne {
	if s != nil {
		cuo.SetCertPath(*s)
	}
	return cuo
}

// ClearCertPath clears the value of the "certPath" field.
func (cuo *CertUpdateOne) ClearCertPath() *CertUpdateOne {
	cuo.mutation.ClearCertPath()
	return cuo
}

// SetKeyPath sets the "keyPath" field.
func (cuo *CertUpdateOne) SetKeyPath(s string) *CertUpdateOne {
	cuo.mutation.SetKeyPath(s)
	return cuo
}

// SetNillableKeyPath sets the "keyPath" field if the given value is not nil.
func (cuo *CertUpdateOne) SetNillableKeyPath(s *string) *CertUpdateOne {
	if s != nil {
		cuo.SetKeyPath(*s)
	}
	return cuo
}

// ClearKeyPath clears the value of the "keyPath" field.
func (cuo *CertUpdateOne) ClearKeyPath() *CertUpdateOne {
	cuo.mutation.ClearKeyPath()
	return cuo
}

// SetAuto sets the "auto" field.
func (cuo *CertUpdateOne) SetAuto(b bool) *CertUpdateOne {
	cuo.mutation.SetAuto(b)
	return cuo
}

// SetNillableAuto sets the "auto" field if the given value is not nil.
func (cuo *CertUpdateOne) SetNillableAuto(b *bool) *CertUpdateOne {
	if b != nil {
		cuo.SetAuto(*b)
	}
	return cuo
}

// SetResult sets the "result" field.
func (cuo *CertUpdateOne) SetResult(s string) *CertUpdateOne {
	cuo.mutation.SetResult(s)
	return cuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (cuo *CertUpdateOne) SetNillableResult(s *string) *CertUpdateOne {
	if s != nil {
		cuo.SetResult(*s)
	}
	return cuo
}

// ClearResult clears the value of the "result" field.
func (cuo *CertUpdateOne) ClearResult() *CertUpdateOne {
	cuo.mutation.ClearResult()
	return cuo
}

// Mutation returns the CertMutation object of the builder.
func (cuo *CertUpdateOne) Mutation() *CertMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CertUpdate builder.
func (cuo *CertUpdateOne) Where(ps ...predicate.Cert) *CertUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CertUpdateOne) Select(field string, fields ...string) *CertUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cert entity.
func (cuo *CertUpdateOne) Save(ctx context.Context) (*Cert, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CertUpdateOne) SaveX(ctx context.Context) *Cert {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CertUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CertUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CertUpdateOne) check() error {
	if v, ok := cuo.mutation.Email(); ok {
		if err := cert.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Cert.email": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CertPath(); ok {
		if err := cert.CertPathValidator(v); err != nil {
			return &ValidationError{Name: "certPath", err: fmt.Errorf(`ent: validator failed for field "Cert.certPath": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.KeyPath(); ok {
		if err := cert.KeyPathValidator(v); err != nil {
			return &ValidationError{Name: "keyPath", err: fmt.Errorf(`ent: validator failed for field "Cert.keyPath": %w`, err)}
		}
	}
	return nil
}

func (cuo *CertUpdateOne) sqlSave(ctx context.Context) (_node *Cert, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cert.Table, cert.Columns, sqlgraph.NewFieldSpec(cert.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cert.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cert.FieldID)
		for _, f := range fields {
			if !cert.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cert.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Domains(); ok {
		_spec.SetField(cert.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cert.FieldDomains, value)
		})
	}
	if value, ok := cuo.mutation.Email(); ok {
		_spec.SetField(cert.FieldEmail, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Config(); ok {
		_spec.SetField(cert.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := cuo.mutation.CertPath(); ok {
		_spec.SetField(cert.FieldCertPath, field.TypeString, value)
	}
	if cuo.mutation.CertPathCleared() {
		_spec.ClearField(cert.FieldCertPath, field.TypeString)
	}
	if value, ok := cuo.mutation.KeyPath(); ok {
		_spec.SetField(cert.FieldKeyPath, field.TypeString, value)
	}
	if cuo.mutation.KeyPathCleared() {
		_spec.ClearField(cert.FieldKeyPath, field.TypeString)
	}
	if value, ok := cuo.mutation.Auto(); ok {
		_spec.SetField(cert.FieldAuto, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Result(); ok {
		_spec.SetField(cert.FieldResult, field.TypeString, value)
	}
	if cuo.mutation.ResultCleared() {
		_spec.ClearField(cert.FieldResult, field.TypeString)
	}
	_node = &Cert{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cert.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
