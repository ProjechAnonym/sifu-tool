// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"sifu-tool/ent/ddns"
	"sifu-tool/models"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// DDNS is the model entity for the DDNS schema.
type DDNS struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// V4method holds the value of the "v4method" field.
	V4method int `json:"v4method,omitempty"`
	// V6method holds the value of the "v6method" field.
	V6method int `json:"v6method,omitempty"`
	// Ipv6 holds the value of the "ipv6" field.
	Ipv6 string `json:"ipv6,omitempty"`
	// Rev6 holds the value of the "rev6" field.
	Rev6 string `json:"rev6,omitempty"`
	// Ipv4 holds the value of the "ipv4" field.
	Ipv4 string `json:"ipv4,omitempty"`
	// Rev4 holds the value of the "rev4" field.
	Rev4 string `json:"rev4,omitempty"`
	// V4script holds the value of the "v4script" field.
	V4script string `json:"v4script,omitempty"`
	// V4interface holds the value of the "v4interface" field.
	V4interface string `json:"v4interface,omitempty"`
	// V6script holds the value of the "v6script" field.
	V6script string `json:"v6script,omitempty"`
	// V6interface holds the value of the "v6interface" field.
	V6interface string `json:"v6interface,omitempty"`
	// Domains holds the value of the "domains" field.
	Domains []models.Domain `json:"domains,omitempty"`
	// Config holds the value of the "config" field.
	Config map[string]string `json:"config,omitempty"`
	// Webhook holds the value of the "webhook" field.
	Webhook map[string]string `json:"webhook,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags         []string `json:"tags,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DDNS) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ddns.FieldDomains, ddns.FieldConfig, ddns.FieldWebhook, ddns.FieldTags:
			values[i] = new([]byte)
		case ddns.FieldID, ddns.FieldV4method, ddns.FieldV6method:
			values[i] = new(sql.NullInt64)
		case ddns.FieldIpv6, ddns.FieldRev6, ddns.FieldIpv4, ddns.FieldRev4, ddns.FieldV4script, ddns.FieldV4interface, ddns.FieldV6script, ddns.FieldV6interface:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DDNS fields.
func (d *DDNS) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ddns.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case ddns.FieldV4method:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field v4method", values[i])
			} else if value.Valid {
				d.V4method = int(value.Int64)
			}
		case ddns.FieldV6method:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field v6method", values[i])
			} else if value.Valid {
				d.V6method = int(value.Int64)
			}
		case ddns.FieldIpv6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ipv6", values[i])
			} else if value.Valid {
				d.Ipv6 = value.String
			}
		case ddns.FieldRev6:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rev6", values[i])
			} else if value.Valid {
				d.Rev6 = value.String
			}
		case ddns.FieldIpv4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ipv4", values[i])
			} else if value.Valid {
				d.Ipv4 = value.String
			}
		case ddns.FieldRev4:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rev4", values[i])
			} else if value.Valid {
				d.Rev4 = value.String
			}
		case ddns.FieldV4script:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v4script", values[i])
			} else if value.Valid {
				d.V4script = value.String
			}
		case ddns.FieldV4interface:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v4interface", values[i])
			} else if value.Valid {
				d.V4interface = value.String
			}
		case ddns.FieldV6script:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v6script", values[i])
			} else if value.Valid {
				d.V6script = value.String
			}
		case ddns.FieldV6interface:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field v6interface", values[i])
			} else if value.Valid {
				d.V6interface = value.String
			}
		case ddns.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case ddns.FieldConfig:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case ddns.FieldWebhook:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field webhook", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Webhook); err != nil {
					return fmt.Errorf("unmarshal field webhook: %w", err)
				}
			}
		case ddns.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &d.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DDNS.
// This includes values selected through modifiers, order, etc.
func (d *DDNS) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// Update returns a builder for updating this DDNS.
// Note that you need to call DDNS.Unwrap() before calling this method if this DDNS
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *DDNS) Update() *DDNSUpdateOne {
	return NewDDNSClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the DDNS entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *DDNS) Unwrap() *DDNS {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: DDNS is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *DDNS) String() string {
	var builder strings.Builder
	builder.WriteString("DDNS(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("v4method=")
	builder.WriteString(fmt.Sprintf("%v", d.V4method))
	builder.WriteString(", ")
	builder.WriteString("v6method=")
	builder.WriteString(fmt.Sprintf("%v", d.V6method))
	builder.WriteString(", ")
	builder.WriteString("ipv6=")
	builder.WriteString(d.Ipv6)
	builder.WriteString(", ")
	builder.WriteString("rev6=")
	builder.WriteString(d.Rev6)
	builder.WriteString(", ")
	builder.WriteString("ipv4=")
	builder.WriteString(d.Ipv4)
	builder.WriteString(", ")
	builder.WriteString("rev4=")
	builder.WriteString(d.Rev4)
	builder.WriteString(", ")
	builder.WriteString("v4script=")
	builder.WriteString(d.V4script)
	builder.WriteString(", ")
	builder.WriteString("v4interface=")
	builder.WriteString(d.V4interface)
	builder.WriteString(", ")
	builder.WriteString("v6script=")
	builder.WriteString(d.V6script)
	builder.WriteString(", ")
	builder.WriteString("v6interface=")
	builder.WriteString(d.V6interface)
	builder.WriteString(", ")
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", d.Domains))
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", d.Config))
	builder.WriteString(", ")
	builder.WriteString("webhook=")
	builder.WriteString(fmt.Sprintf("%v", d.Webhook))
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", d.Tags))
	builder.WriteByte(')')
	return builder.String()
}

// DDNSs is a parsable slice of DDNS.
type DDNSs []*DDNS
