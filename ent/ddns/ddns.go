// Code generated by ent, DO NOT EDIT.

package ddns

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the ddns type in the database.
	Label = "ddns"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldV4method holds the string denoting the v4method field in the database.
	FieldV4method = "v4method"
	// FieldV6method holds the string denoting the v6method field in the database.
	FieldV6method = "v6method"
	// FieldIpv6 holds the string denoting the ipv6 field in the database.
	FieldIpv6 = "ipv6"
	// FieldRev6 holds the string denoting the rev6 field in the database.
	FieldRev6 = "rev6"
	// FieldIpv4 holds the string denoting the ipv4 field in the database.
	FieldIpv4 = "ipv4"
	// FieldRev4 holds the string denoting the rev4 field in the database.
	FieldRev4 = "rev4"
	// FieldV4script holds the string denoting the v4script field in the database.
	FieldV4script = "v4script"
	// FieldV4interface holds the string denoting the v4interface field in the database.
	FieldV4interface = "v4interface"
	// FieldV6script holds the string denoting the v6script field in the database.
	FieldV6script = "v6script"
	// FieldV6interface holds the string denoting the v6interface field in the database.
	FieldV6interface = "v6interface"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldConfig holds the string denoting the config field in the database.
	FieldConfig = "config"
	// FieldWebhook holds the string denoting the webhook field in the database.
	FieldWebhook = "webhook"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// Table holds the table name of the ddns in the database.
	Table = "ddn_ss"
)

// Columns holds all SQL columns for ddns fields.
var Columns = []string{
	FieldID,
	FieldV4method,
	FieldV6method,
	FieldIpv6,
	FieldRev6,
	FieldIpv4,
	FieldRev4,
	FieldV4script,
	FieldV4interface,
	FieldV6script,
	FieldV6interface,
	FieldDomains,
	FieldConfig,
	FieldWebhook,
	FieldTags,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// Ipv6Validator is a validator for the "ipv6" field. It is called by the builders before save.
	Ipv6Validator func(string) error
	// Rev6Validator is a validator for the "rev6" field. It is called by the builders before save.
	Rev6Validator func(string) error
	// Ipv4Validator is a validator for the "ipv4" field. It is called by the builders before save.
	Ipv4Validator func(string) error
	// Rev4Validator is a validator for the "rev4" field. It is called by the builders before save.
	Rev4Validator func(string) error
	// V4scriptValidator is a validator for the "v4script" field. It is called by the builders before save.
	V4scriptValidator func(string) error
	// V4interfaceValidator is a validator for the "v4interface" field. It is called by the builders before save.
	V4interfaceValidator func(string) error
	// V6scriptValidator is a validator for the "v6script" field. It is called by the builders before save.
	V6scriptValidator func(string) error
	// V6interfaceValidator is a validator for the "v6interface" field. It is called by the builders before save.
	V6interfaceValidator func(string) error
)

// OrderOption defines the ordering options for the DDNS queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByV4method orders the results by the v4method field.
func ByV4method(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV4method, opts...).ToFunc()
}

// ByV6method orders the results by the v6method field.
func ByV6method(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV6method, opts...).ToFunc()
}

// ByIpv6 orders the results by the ipv6 field.
func ByIpv6(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpv6, opts...).ToFunc()
}

// ByRev6 orders the results by the rev6 field.
func ByRev6(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRev6, opts...).ToFunc()
}

// ByIpv4 orders the results by the ipv4 field.
func ByIpv4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIpv4, opts...).ToFunc()
}

// ByRev4 orders the results by the rev4 field.
func ByRev4(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRev4, opts...).ToFunc()
}

// ByV4script orders the results by the v4script field.
func ByV4script(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV4script, opts...).ToFunc()
}

// ByV4interface orders the results by the v4interface field.
func ByV4interface(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV4interface, opts...).ToFunc()
}

// ByV6script orders the results by the v6script field.
func ByV6script(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV6script, opts...).ToFunc()
}

// ByV6interface orders the results by the v6interface field.
func ByV6interface(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldV6interface, opts...).ToFunc()
}
